{% extends 'base_fluid.html.twig' %}

{% block title %}Enactment{% endblock %}

{% block body %}

    <div class="alert alert-danger validation-banner-1 mt-3" role="alert">
        Enactment can not be started! Please check the <a class="btn btn-primary" data-toggle="modal"
                                                          data-target="#exampleModalCenter">log</a> to find out the
        reasons.
    </div>

    <!-- Log Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
         aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul>

                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    {#<button type="button" class="btn btn-primary">Save changes</button>#}
                </div>
            </div>
        </div>
    </div>


    {# situational Method #}
    <div class="mt-5 d-flex flex-column ">

        <h3 class="m-auto"> Enactment of {{ situationalMethod.name }}</h3>

        <div style="width: 96%; height:870px; margin:auto; display: flex;
          flex-direction: row;">

            <div id="situational-methods"
                 style="width: 80%; height: 93%; border: 1px solid black; display: flex; flex-direction: row;
                  align-items: flex-start; min-width: 340px;"
                 data-nodes="{{ situationalMethod.jsonNodes }}" data-edges="{{ situationalMethod.jsonEdges }}"
                 data-tasks="{{ situationalMethod.jsonTasks }}">

            </div>

            {# Hilfreiches Symbol #}
            <div style="width: 20%; height: 93%;; border: 1px solid black; display:flex; flex-direction: column;
             align-items: center; min-width: 260px;">

                <h5 class="mt-3"><u>Helpful Information</u></h5>

                <div style="width: 145px; height: 60px; background: red; border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: white; font-size: larger">
                    <span><b>ToDo</b></span>
                </div>

                <div style="width: 145px; height: 60px; background: rgba(248,151,8,0.76); border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: #0c0c0c; font-size: larger">
                    <span><b>Under Progress</b></span>
                </div>

                <div style="width: 145px; height: 60px; background: #54f856; border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: #000000; font-size: larger">
                    <span><b>Finished</b></span>
                </div>

                <div style="width: 145px; height: 60px; background: #0796f8; border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: white; font-size: larger">
                    <span><b>Canceled</b></span>
                </div>

                <div style="align-items: center;display: flex;">
                    <span style="color: black; font-size: larger; margin-top:6%; "><b>Sub Task</b></span>
                    <span style="color: red; font-size: xxx-large;"><b>&rarr;</b></span>
                </div>

                <div style="align-items: center;display: flex;">
                    <span style="color: black; font-size: larger; margin-top:6%; "><b>Prerequisite</b></span>
                    <span style="color: #0040ff; font-size: xxx-large;"><b>&rarr;</b></span>
                </div>

            </div>

        </div>
    </div>


    {# Modal 3 : Popup For Method Block View #}
    <div id="method-block-popup" tabindex="-1"
         style="position: fixed;top: 8%; left:10%;display: none; width: 565px; background: #a4cbf8"
         role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-nodeId="">
        <div class="modal-content" style="max-height: 600px; background: #a8a6a3">
            {# Header #}
            <div class="modal-header">
                <h5 class="modal-title" id="name-of-method-block"> {# Name of block comes here #}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            {# Body #}
            <div class="modal-body" style="overflow: auto">
                {# input artifacts, output artifacts, roles and tools come here #}
                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Input Artifacts</h5>
                    <div class="input-artifacts">

                    </div>
                </div>

                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Output Artifacts</h5>
                    <div class="output-artifacts">

                    </div>
                </div>

                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Roles</h5>
                    <div class="roles">

                    </div>
                </div>

                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Tools</h5>
                    <div class="tools">

                    </div>
                </div>

            </div>

            {# Footer #}
            <div class="modal-footer">

            </div>

        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let nodes = [];
        let edges = [];
        let tasks = [];
        let nodesFromDatabase = JSON.parse(JSON.stringify($("#situational-methods").data("nodes")));
        let edgesFromDatabase = JSON.parse(JSON.stringify($("#situational-methods").data("edges")));
        let tasksFromDatabase = JSON.parse(JSON.stringify($("#situational-methods").data("tasks")));

        nodesFromDatabase.forEach(function (item, index) {
            item.id = parseInt(item.id);
            item.level = parseInt(item.level);
            item.margin = parseInt(item.margin);
            nodes.push(item);
        });

        edgesFromDatabase.forEach(function (item, index) {
            item.from = parseInt(item.from);
            item.to = parseInt(item.to);
            edges.push(item);
        });

        tasksFromDatabase.forEach(function (item, index) {
            item.id = parseInt(item.id);
            item.level = parseInt(item.level);
            item.margin = parseInt(item.margin);
            tasks.push(item);
        });

        let network = null;
        let body = $("body");
        let nodePopup = $("#node-popup");
        let methodBlockPopup = $("#method-block-popup");
        let graphRootNodePopup = $("#graph-root-node-popup");
        let processTypeInModal = $("#modal-process-type");
        let level = $("#level");
        let situationalMethods = $("#situational-methods");
        let nameOfRootNode = $("#name-of-root-node");
        let hideShowMethodBlocksOfStep = $("#hide-step-method-blocks");
        nameOfRootNode.val("");

        let graphsAndTheirSituationalFactors = JSON.parse(("{{ situationalMethod.graphsAndTheirSituationalFactors }}").replace(/&quot;/ig, '"'));

        let nodePopupToRefer = null;
        let bmdGraphsBeingUsed = JSON.parse(("{{ situationalMethod.bmdGraphsBeingUsed|json_encode }}").replace(/&quot;/ig, '"'));
        console.log(tasks);
        let totalHiddenTrees = 0;
        let temporaryNode = null;
        let methodRecommendationCounter = 0;
        let levelToggleCounter = 0;

        let tools = JSON.parse(("{{ tools|json_encode }}").replace(/&quot;/ig, '"'));
        let roles = JSON.parse(("{{ roles|json_encode }}").replace(/&quot;/ig, '"'));
        let teamMembers = JSON.parse(("{{ teamMembers|json_encode }}").replace(/&quot;/ig, '"'));

        console.log(tools, roles, teamMembers);

        initializeGraph(true);

        function initializeGraph(physicsStatus) {
            // create a network
            let container = document.getElementById('situational-methods');

            // provide the data in the vis format
            let data = {
                nodes: nodes,
                edges: edges
            };
            let options = {
                physics: {
                    enabled: physicsStatus,
                    hierarchicalRepulsion: {
                        centralGravity: 0.0,
                        springLength: 300,
                        springConstant: 0.01,
                        nodeDistance: 300,
                        damping: 0.09
                    },
                    solver: 'hierarchicalRepulsion'
                },

                edges: {
                    length: 320// Longer edges between nodes.

                },
                layout: {
                    hierarchical: {
                        direction: "UD",
                        nodeSpacing: 350,
                    },
                },
                nodes: {
                    size: 35,
                    font: {
                        size: 20,
                        color: '#000000'
                    },
                    widthConstraint: {
                        maximum: 300
                    },
                    /*fixed: {
                        x: true,
                        y: true
                    },*/
                },
            };

            // initialize your network!
            network = new vis.Network(container, data, options);
            checkEvents();
        }

        function checkEvents() {

            network.on("doubleClick", function (params) {

                params.event = "[original event]";
                let parsedObject = JSON.parse(JSON.stringify(params, null, 4));
                let nodeId = parsedObject.nodes[0];

                let node = getNodeObject(nodeId);

                if (node === null) {
                    return;
                } else if (node.id !== 1 && ((node.shape === 'circle') || node.shape === 'diamond')) {

                    if (node.isHidden === true)
                        showAllSteps(nodeId);
                    else
                        hideAllSteps(nodeId);

                } else if (node.type === 'methodBlock') {

                    let artifactInputHTML = (artifactType, artifact, nodeId, frontendId) => `
                               <div class="d-flex flex-row flex-wrap mb-2 justify-content-between">
                                    <div class="input-group mb-3">
                                      <div class="input-group-prepend">
                                        <span class="input-group-text">${artifact}</span>
                                      </div>
                                      <div class="custom-file">
                                        <input type="file" id="${frontendId}" class="custom-file-input" data-nodeId="${nodeId}" data-artifact="${artifact}" data-artifactType="${artifactType}">
                                        <label class="custom-file-label">Choose file</label>
                                      </div>
                                    </div>
                               </div>
                                `;

                    let artifactOutputHTML = (artifactType, artifact, nodeId, filePath) => `
                                <div class="d-flex flex-row flex-wrap mb-2 justify-content-between">

                                  <span style="display: flex; flex-direction: column; justify-content: center; color: #010668; margin-left:1%;">
                                      <a target="_blank" href="${filePath}" id="${nodeId}">${artifact}</a>
                                  </span>

                                  <button class="remove-artifact btn btn-warning ml-3"
                                   data-id="${nodeId}" data-artifactType="${artifactType}">
                                        Remove
                                  </button>
                                </div>
                                `;

                    let toBeFilledUpRole = (key, nodeId, selectId) => `
                               <div class="to-be-filled-role d-flex flex-row flex-wrap mb-3">

                                    <div class="input-group mb-3">

                                          <div class="input-group-prepend">
                                            <label class="input-group-text" for="${selectId}">${key}</label>
                                          </div>

                                          <select class="custom-select role-select" id="${selectId}" data-nodeId="${nodeId}" data-role="${key}">
                                            <option value="0" selected>Choose...</option>

                                          </select>

                                    </div>

                               </div>
                                `;

                    let toBeFilledUpTool = (toolType, selectId, nodeId) => `

                                    <div style="display: flex; flex-direction: row; width: 90%;">
                                          <div class="input-group-prepend">
                                            <label class="input-group-text"><b>Tool Type: &nbsp</b> ${toolType} </label>
                                          </div>
                                          <select class="custom-select tool-select" id="${selectId}" data-nodeId="${nodeId}" data-toolType="${toolType}">
                                            <option selected>Choose a tool..</option>

                                          </select>
                                    </div>

                                `;

                    nodePopupToRefer = methodBlockPopup;
                    showNodePopup(methodBlockPopup);

                    let task = getTask(parseInt(node.id));
                    methodBlockPopup.attr("data-nodeId", node.id);

                    //Clear previous contents from the dom
                    $(".input-artifacts").children().remove();
                    $(".output-artifacts").children().remove();
                    $(".roles").children().remove();
                    $(".tools").children().remove();


                    $("#name-of-method-block").html("<b>Name of method block::</b> " + task.label);
                    for (let [key, value] of Object.entries(task)) {
                        if (key === 'inputArtifacts') {
                            task[key].forEach(function (artifact, index) {
                                if (typeof artifact === 'object' && artifact !== null) {
                                    let uploadedArtifact = artifactOutputHTML('inputArtifact', artifact.name, nodeId, artifact.path);
                                    $(".input-artifacts").append(uploadedArtifact);
                                }
                                else if (artifact !== "")
                                {
                                    let frontendId = key+"-"+artifact.replace(/ /g, '')+"-"+task.id;
                                    methodBlockPopup.find(".input-artifacts").append(artifactInputHTML('inputArtifact', artifact, task.id, frontendId));

                                    if(!userHasWritePermission(task))
                                        $("#" + frontendId).attr('disabled',true);
                                }

                            });
                        }
                        if (key === 'outputArtifacts') {
                            task[key].forEach(function (artifact, index) {
                                if (typeof artifact === 'object' && artifact !== null) {
                                    let uploadedArtifact = artifactOutputHTML('outputArtifact', artifact.name, nodeId, artifact.path);
                                    $(".output-artifacts").append(uploadedArtifact);
                                }
                                else if (artifact !== "")
                                {
                                    let frontendId = key+"-"+artifact.replace(/ /g, '')+"-"+task.id;
                                    methodBlockPopup.find(".output-artifacts").append(artifactInputHTML('outputArtifact', artifact, task.id, frontendId));

                                    if(!userHasWritePermission(task))
                                        $("#" + frontendId).attr('disabled',true);
                                }

                            });
                        }
                        if (roles.includes(key)) { //such as platform-owner, vp of sales, etc
                            let selectId = key.replace(/ /g, '') + "-" + task.id;
                            methodBlockPopup.find(".roles").append(toBeFilledUpRole(key, task.id, selectId));

                            {% if not is_granted('ROLE_PROJECT_MANAGER') %}
                                $("#" + selectId).attr('disabled',true);
                            {% endif %}

                            if (value === "") //i.e when no members have been assigned to the role(key)
                            {
                                for (let [memberName, memberId] of Object.entries(teamMembers)) {
                                    $("#" + selectId).append(new Option(memberId, memberName));
                                }
                            } else if (typeof value === 'object') {
                                for (let [memberId, memberName] of Object.entries(teamMembers)) {
                                    if (memberName === value.memberName)
                                        $("#" + selectId).append(new Option(memberName, memberId, true, true));
                                    else
                                        $("#" + selectId).append(new Option(memberName, memberId));
                                }
                            }

                        }
                        if (key in tools) {
                            let selectId = key.replace(/ /g, '') + "-" + task.id;
                            methodBlockPopup.find(".tools").append(toBeFilledUpTool(key, selectId, node.id));

                            let toolsOptions = tools[key].split(",");
                            toolsOptions.forEach(function (item, index) {
                                $("#" + selectId).append(new Option(item, item));
                            });
                        }
                    }

                    //Logic to update artifacts
                    $(".custom-file-input").on("change", function () {
                        let nodeId = $(this).attr("data-nodeId");
                        let task = getTask(parseInt(nodeId));
                        let artifact = $(this).data("artifact");
                        let artifactType = $(this).attr("data-artifactType");

                        let form = new FormData();
                        form.append("file_name", $(this)[0].files[0]);
                        form.append('artifact_name', artifact);
                        form.append('artifact_type', artifactType);
                        form.append('task_id', task.taskId);
                        form.append('update_type', 'update_artifact');

                        let currentSelector = $(this);

                        $.ajax({
                            type: 'post',
                            url: '{{ path('task_update') }}',
                            processData: false,
                            contentType: false,
                            data: form,
                            success: function (response) {
                                let obj = JSON.parse(JSON.stringify(response));
                                if (obj.status === 'success') {
                                    let filePath = "{{ asset('images/artifacts') }}" + "/" + obj.fileName;
                                    currentSelector.parent().parent().remove();
                                    let uploadedArtifact = artifactOutputHTML(artifactType, artifact, nodeId, filePath);

                                    artifactType === 'inputArtifact' ? $(".input-artifacts").append(uploadedArtifact) :
                                        $(".output-artifacts").append(uploadedArtifact);

                                    if (artifactType === 'inputArtifact') {
                                        for (let [key, value] of Object.entries(task)) {
                                            if (key === 'inputArtifacts') {
                                                task[key].forEach(function (ourArtifact, index) {
                                                    if (ourArtifact === artifact)
                                                        task[key].splice(index, 1, {name: artifact, path: filePath});
                                                });
                                            }
                                        }
                                    }
                                    if (artifactType === 'outputArtifact') {
                                        for (let [key, value] of Object.entries(task)) {
                                            if (key === 'outputArtifacts') {
                                                task[key].forEach(function (ourArtifact, index) {
                                                    if (ourArtifact === artifact)
                                                        task[key].splice(index, 1, {name: artifact, path: filePath});
                                                });
                                            }
                                        }
                                    }

                                    updateJsonTasks();
                                }
                            },
                        });
                    });

                    $(".role-select").on("change", function () {
                        let role = $(this).attr("data-role");
                        let nodeId = $(this).attr("data-nodeId");
                        let selectedMember = $(this).find('option:selected').text();
                        let selectedVal = $(this).find('option:selected').val();

                        let task = getTask(nodeId);
                        delete task.key;
                        if(parseInt(selectedVal)!==0)
                            task[role] = {memberId: selectedVal, memberName: selectedMember};
                        else
                            task[role]="";

                        updateJsonTasks();
                    });
                }

                $(".close").on("click", function (e) {
                    e.stopImmediatePropagation();
                    closeNodePopup(nodePopupToRefer);
                });
            });
        }


        /*-----------------------------Helper Functions ----------------------------------*/

        function getNodeObject(nodeId) {
            let node = null;
            nodes.forEach(function (item, index) {
                if (item.id === nodeId)
                    node = item;
            });
            return node;
        }

        function closeNodePopup(divToClose) {
            divToClose.css("display", "none");
            $(".container-fluid").children().not(divToClose).css({
                "pointer-events": "auto",
            });
            $(".container-fluid").children().not(divToClose).css("opacity", "1");

            if (divToClose === nodePopup) {

                $("#recommended-graphs, #recommended-methods").css({
                    'pointer-events': 'auto',
                    'opacity': '1'
                });
            }
        }

        function showNodePopup(divToShow) {

            if (divToShow === nodePopup) {
                $("#spinner-2").css("display", "block");
                $("#add-these-blocks").prop("disabled", true);
                $("#recommended-graphs").children().remove();
                $("#recommended-methods").children().remove();
                methodRecommendationCounter++;
            }

            $(".container-fluid").children().not(divToShow).css({
                "pointer-events": "none",
                "opacity": "0.4"
            });
            divToShow.css("display", "block");
            nodePopupToRefer = divToShow;
        }

        function hideAllSteps(rootNodeId) {

            getNodeObject(rootNodeId).isHidden = true;
            edges.forEach(function (edge, index) {
                if (edge.from === rootNodeId && edge.color === "red") {
                    let node = getNodeObject(edge.to);
                    if (node) {
                        node.hidden = true;
                        hideAllSteps(parseInt(node.id));
                    }
                }
            });
            totalHiddenTrees++;
            initializeGraph(false);
        }

        function showAllSteps(rootNodeId) {
            /*getNodeObject(rootNodeId).color = "#bababa";*/
            getNodeObject(rootNodeId).isHidden = false;
            edges.forEach(function (edge, index) {
                if (edge.from === rootNodeId && edge.color === "red") {
                    let node = getNodeObject(edge.to);
                    if (node) {
                        node.hidden = false;
                        showAllSteps(parseInt(node.id));
                    }
                }
            });
            totalHiddenTrees--;

            if (totalHiddenTrees === 0) {
                initializeGraph(true);
            } else
                initializeGraph(false);
        }


        function getLocalRootNodeObject(nodeId) {

            let localRootNodeId = null;
            edges.forEach(function (edge, index) {
                if (edge.arrows === "from" && edge.to === parseInt(nodeId) && edge.arrows === "from") {
                    localRootNodeId = getLocalRootNodeObject(parseInt(edge.from));
                }
            });
            return getNodeObject(localRootNodeId);
        }

        function checkIfLocalSupremeRootNodeReadyToBeExecuted(childNode) //This was previously a processType node
        {
            let localSupremeNode = getLocalRootNodeObject(childNode.id);

            let allLocalChildren = [];
            //Get all the edged nodes from child to local supreme and check if they are ready
            edges.forEach(function (edge, index) {
                if (edge.arrows === 'from' && parseInt(edge.from) === parseInt(localSupremeNode.id) && edge.color === "red")
                    allLocalChildren.push(getNodeObject(parseInt(edge.to)));
            });

            let allChildNodesAreActive = true;
            allLocalChildren.forEach(function (childNode, index) {
                if (childNode.color !== "#f86262")
                    allChildNodesAreActive = false;
            });

            if (allChildNodesAreActive)
                localSupremeNode.color = "#f86262";

            initializeGraph(true);
        }


        function refreshedNodeValue() {
            return temporaryNode;
        }

        function enactmentValidation() {
            tasks.forEach(function (task, index) {
                for (let [key, value] of Object.entries(task)) {

                }
            });
        }

        function getTask(nodeId) {
            let myTask = null;
            tasks.forEach(function (task, index) {
                if (parseInt(task.id) === parseInt(nodeId))
                    myTask = task;
            });
            return myTask;
        }

        function updateJsonTasks() {
            console.log(tasks);
            $.ajax({
                type: 'POST',
                url: '{{ path('task_update') }}',
                data: {
                    method_id: "{{ situationalMethod.id }}",
                    tasks: tasks,
                    update_type: 'update_jsonTasks'
                },
                success: function (response) {
                    let obj = JSON.parse(JSON.stringify(response));
                    console.log(obj);
                }
            });
        }

        function userHasWritePermission(task)
        {
            let haveWritePermission = false;

            let currentUser = "{{ app.user.employeeName ~" : "~ app.user.implodedRoles }}"
            console.log(currentUser);
            for (let [role, object] of Object.entries(task)){
                if (roles.includes(role)){
                    if(object!=="" && object.memberName===currentUser)
                        haveWritePermission = true;
                }
            }
            {% if is_granted('ROLE_PROJECT_MANAGER') %}
                haveWritePermission = true;
            {% endif %}

            return haveWritePermission;
        }

    </script>
{% endblock %}
