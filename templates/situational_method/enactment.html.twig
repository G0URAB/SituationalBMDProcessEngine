{% extends 'base_fluid.html.twig' %}

{% block title %}Enactment{% endblock %}

{% block body %}

    <div class="alert alert-danger validation-banner-1 mt-3" role="alert">
        Enactment can not be started! Please check the <a class="btn btn-primary" data-toggle="modal"
                                                          data-target="#logger">log</a> to find out the
        reasons.
    </div>

    <!-- Log Modal -->
    <div class="modal fade" id="logger" tabindex="-1" role="dialog"
         aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logger-title">Log Report</h5>
                </div>
                <div class="modal-body">
                    <ul>

                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    {#<button type="button" class="btn btn-primary">Save changes</button>#}
                </div>
            </div>
        </div>
    </div>

    <!-- Show comments modal -->
    <div class="modal fade" id="comments" tabindex="-1" role="dialog"
         aria-labelledby="exampleModalCenterTitle" aria-hidden="true" data-taskId="">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="logger-title">Comments</h5>
                </div>

                <div class="modal-body">

                    <ul>

                    </ul>

                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">New Comment</span>
                        </div>
                        <textarea class="form-control" aria-label="New Comment" id="new-comment"></textarea>
                    </div>
                    <button type="button" class="btn btn-primary mt-1" id="add-comment">Add a Comment</button>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Show comments modal -->
    <div class="modal fade" id="dependencies" tabindex="-1" role="dialog"
         aria-labelledby="exampleModalCenterTitle" aria-hidden="true" data-taskId="">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h4 class="modal-title" id="logger-title">Dependencies</h4>
                </div>

                <div class="modal-body">
                    <h7>Input Dependencies</h7>
                    <ul id="input-dependencies">

                    </ul>

                    <hr>

                    <h7>Output Dependencies</h7>
                    <ul id="output-dependencies">

                    </ul>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    {# situational Method #}
    <div class="mt-5 d-flex flex-column ">

        <h3 class="m-auto"> Enactment of {{ situationalMethod.name }}</h3>

        <div style="width: 96%; height:870px; margin:auto; display: flex;
          flex-direction: row;">

            <div id="situational-methods"
                 style="width: 80%; height: 93%; border: 1px solid black; display: flex; flex-direction: row;
                  align-items: flex-start; min-width: 340px;"
                 data-nodes="{{ situationalMethod.jsonNodes }}" data-edges="{{ situationalMethod.jsonEdges }}"
                 data-tasks="{{ situationalMethod.jsonTasks }}">

            </div>

            {# Hilfreiches Symbol #}
            <div style="width: 20%; height: 93%;; border: 1px solid black; display:flex; flex-direction: column;
             align-items: center; min-width: 260px;">

                <h5 class="mt-3"><u>Helpful Information</u></h5>

                <div style="width: 145px; height: 60px; background: red; border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: white; font-size: larger">
                    <span><b>ToDo</b></span>
                </div>

                <div style="width: 145px; height: 60px; background: rgba(248,151,8,0.76); border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: #0c0c0c; font-size: larger">
                    <span><b>Under Progress</b></span>
                </div>

                <div style="width: 145px; height: 60px; background: #54f856; border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: #000000; font-size: larger">
                    <span><b>Finished</b></span>
                </div>

                <div style="width: 145px; height: 60px; background: #0796f8; border-radius: 5px; margin-top:15%;
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                     color: white; font-size: larger">
                    <span><b>Canceled</b></span>
                </div>

                <div style="align-items: center;display: flex;">
                    <span style="color: black; font-size: larger; margin-top:6%; "><b>Sub Task</b></span>
                    <span style="color: red; font-size: xxx-large;"><b>&rarr;</b></span>
                </div>

                <div style="align-items: center;display: flex;">
                    <span style="color: black; font-size: larger; margin-top:6%; "><b>Prerequisite</b></span>
                    <span style="color: #0040ff; font-size: xxx-large;"><b>&rarr;</b></span>
                </div>

            </div>

        </div>
    </div>


    {# Modal 3 : Popup For Method Block View #}
    <div id="method-block-popup" tabindex="-1"
         style="position: fixed;top: 4%; left:10%;display: none; background: #a4cbf8"
         role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-nodeId="">
        <div class="modal-content" style="max-height: 600px; background: #a8a6a3">

            {# Header #}
            <div class="modal-header">
                <h5 class="modal-title" id="name-of-method-block"> {# Name of block comes here #}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>


            {# Body #}
            <div class="modal-body" style="overflow: auto">

                <div class="form-check d-flex flex-row justify-content-center">
                    <div>
                        <input class="form-check-input" type="checkbox" value="" id="task-can-be-started"
                               onclick="return false;">
                        <label class="form-check-label" for="task-can-be-started">
                            Task can be started?
                        </label>
                    </div>

                </div>


                {# input artifacts, output artifacts, roles and tools come here #}
                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Input Artifacts</h5>
                    <div class="input-artifacts">

                    </div>
                </div>

                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Output Artifacts</h5>
                    <div class="output-artifacts">

                    </div>
                </div>

                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Roles</h5>
                    <div class="roles">

                    </div>
                </div>

                <div class="d-flex flex-column border rounded p-2 mt-2">
                    <h5>Tools</h5>
                    <div class="tools">

                    </div>
                </div>

            </div>

            {# Footer #}
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-toggle="modal"
                        data-target="#comments" id="show-add-comments">Show/Add Comments
                </button>
                <div id="status-box">

                </div>
                <button type="button" class="btn btn-warning" data-toggle="modal"
                        data-target="#dependencies" id="show-dependencies">Show Dependencies
                </button>
            </div>

        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>

        let commentTemplate = (taskId, commentId, user, text) => `
                               <div class="d-flex flex-row flex-wrap mb-2 justify-content-between">
                                    <span> ${user} : ${text}</span>
                                    <button id="${commentId}" class="btn btn-danger delete-comment" data-commentId="${commentId}" data-taskId="${taskId}">Remove</button>
                               </div>
                                `;

        $("#show-dependencies").on("click", function () {

            let dependencies = $("#dependencies");
            dependencies.css("opacity", 1);
            let taskId = $(this).parent().parent().parent().attr("data-nodeId");
            dependencies.attr("data-taskId", taskId);
            let task = getTaskObject(parseInt(taskId));

            let taskCanBeStarted = canStartThisTask(task);
            $("#input-dependencies").children().remove();
            taskCanBeStarted.inputArtifactMessages.split(".").forEach(function (message, index) {
                if (message)
                    $("#input-dependencies").append("<li>" + message + "</li>");
            });
            $("#output-dependencies").children().remove();
            taskCanBeStarted.outputArtifactMessages.split(".").forEach(function (message, index) {
                if (message)
                    $("#output-dependencies").append("<li>" + message + "</li>");
            });

        });

        $("#show-add-comments").on("click", function () {
            let commentsBox = $("#comments");
            commentsBox.css("opacity", 1);
            let taskId = $(this).parent().parent().parent().attr("data-nodeId");
            commentsBox.attr("data-taskId", taskId);

            let task = getTaskObject(parseInt(taskId));
            commentsBox.find(".modal-body").find("ul").children().remove();
            if ('comments' in task) {
                task.comments.forEach(function (comment, index) {

                    let user = comment.user;
                    let commentId = comment.id;
                    let text = comment.text;

                    commentsBox.find(".modal-body").find("ul").append(commentTemplate(taskId, commentId, user, text));

                    if (!userHasWritePermission(task) || user !== "{{ app.user.employeeName }}")
                        $("#" + commentId).attr('disabled', true);
                });
            }
            $("#add-comment").on("click", function () {
                let taskId = parseInt($(this).parent().parent().parent().parent().attr("data-taskId"));
                let task = getTaskObject(taskId);

                if (!('comments' in task)) {
                    task.comments = [];
                }

                let newComment = {
                    id: Date.now(),
                    user: "{{ app.user.employeeName }}",
                    text: $("#new-comment").val()
                }
                task.comments.push(newComment);
                commentsBox.find(".modal-body").find("ul").append(commentTemplate(taskId, newComment.id, newComment.user, newComment.text));
                updateJsonTasks();
            });
        });

        let nodes = [];
        let edges = [];
        let tasks = [];
        let nodesFromDatabase = JSON.parse(JSON.stringify($("#situational-methods").data("nodes")));
        let edgesFromDatabase = JSON.parse(JSON.stringify($("#situational-methods").data("edges")));
        let tasksFromDatabase = JSON.parse(JSON.stringify($("#situational-methods").data("tasks")));

        nodesFromDatabase.forEach(function (item, index) {
            item.id = parseInt(item.id);
            item.level = parseInt(item.level);
            item.margin = parseInt(item.margin);
            item.hidden = false;
            nodes.push(item);
        });

        edgesFromDatabase.forEach(function (item, index) {
            item.from = parseInt(item.from);
            item.to = parseInt(item.to);
            if ('smooth' in item) {
                delete item.smooth;
                item = Object.assign({
                    smooth: {
                        enabled: true,
                        type: "curvedCW",
                        roundness: "0.2",
                        forceDirection: 'horizontal'
                    }
                }, item);
            }
            edges.push(item);
        });

        tasksFromDatabase.forEach(function (item, index) {
            item.id = parseInt(item.id);
            item.level = parseInt(item.level);
            item.margin = parseInt(item.margin);
            if (typeof item.inputArtifacts === 'object') {
                let inputArtifacts = [];
                for (let [key, value] of Object.entries(item.inputArtifacts))
                    inputArtifacts.push(value);
                delete item.inputArtifacts;
                item.inputArtifacts = inputArtifacts;
            }
            tasks.push(item);
        });

        let network = null;
        let body = $("body");
        let nodePopup = $("#node-popup");
        let methodBlockPopup = $("#method-block-popup");
        let graphRootNodePopup = $("#graph-root-node-popup");
        let processTypeInModal = $("#modal-process-type");
        let level = $("#level");
        let situationalMethods = $("#situational-methods");
        let nameOfRootNode = $("#name-of-root-node");
        let hideShowMethodBlocksOfStep = $("#hide-step-method-blocks");
        nameOfRootNode.val("");

        let graphsAndTheirSituationalFactors = JSON.parse(("{{ situationalMethod.graphsAndTheirSituationalFactors }}").replace(/&quot;/ig, '"'));

        let nodePopupToRefer = null;
        let bmdGraphsBeingUsed = JSON.parse(("{{ situationalMethod.bmdGraphsBeingUsed|json_encode }}").replace(/&quot;/ig, '"'));
        console.log(tasks);
        let totalHiddenTrees = 0;
        let temporaryNode = null;
        let methodRecommendationCounter = 0;
        let levelToggleCounter = 0;

        let tools = JSON.parse(("{{ tools|json_encode }}").replace(/&quot;/ig, '"'));
        let roles = JSON.parse(("{{ roles|json_encode }}").replace(/&quot;/ig, '"'));
        let teamMembers = JSON.parse(("{{ teamMembers|json_encode }}").replace(/&quot;/ig, '"'));

        let logs = [];
        validateGraph();

        let artifactInputHTML = (artifactType, artifact, nodeId, frontendId) => `
                               <div class="d-flex flex-row flex-wrap mb-2 justify-content-between">
                                    <div class="input-group mb-3">
                                      <div class="input-group-prepend">
                                        <span class="input-group-text">${artifact}</span>
                                      </div>
                                      <div class="custom-file">
                                        <input type="file" id="${frontendId}" class="custom-file-input" data-nodeId="${nodeId}" data-artifact="${artifact}" data-artifactType="${artifactType}">
                                        <label class="custom-file-label">Choose file</label>
                                      </div>
                                    </div>
                               </div>
                                `;

        let artifactOutputHTML = (artifactType, artifact, nodeId, filePath, removalId) => `
                                <div class="d-flex flex-row flex-wrap mb-2 justify-content-between">

                                  <span style="display: flex; flex-direction: column; justify-content: center; color: #010668; margin-left:1%;">
                                      <a target="_blank" href="${filePath}" id="${nodeId}">${artifact}</a>
                                  </span>

                                  <button class="remove-artifact btn btn-warning ml-3"
                                   data-id="${nodeId}" data-artifactType="${artifactType}" data-artifact="${artifact}"  data-filePath="${filePath}" id="${removalId}">
                                        Remove
                                  </button>
                                </div>
                                `;

        let toBeFilledUpRole = (key, nodeId, selectId) => `
                               <div class="to-be-filled-role d-flex flex-row flex-wrap mb-3">

                                    <div class="input-group mb-3">

                                          <div class="input-group-prepend">
                                            <label class="input-group-text" for="${selectId}">${key}</label>
                                          </div>

                                          <select class="custom-select role-select" id="${selectId}" data-nodeId="${nodeId}" data-role="${key}">
                                            <option value="0" selected>Choose a member...</option>

                                          </select>

                                    </div>

                               </div>
                                `;

        let toBeFilledUpTool = (toolType, selectId, nodeId) => `

                                    <div style="display: flex; flex-direction: row; width: 90%;">
                                          <div class="input-group-prepend">
                                            <label class="input-group-text"><b>Tool Type: &nbsp</b> ${toolType} </label>
                                          </div>
                                          <select class="custom-select tool-select" id="${selectId}" data-nodeId="${nodeId}" data-toolType="${toolType}">
                                            <option value="0" selected>Choose a tool..</option>

                                          </select>
                                    </div>

                                `;

        let taskStatus = (selectId, taskId) => `

                                    <div style="display: flex; flex-direction: row; width: 96%;">
                                          <div class="input-group-prepend">
                                            <label class="input-group-text"><b>Task Status</b> </label>
                                          </div>
                                          <select class="custom-select status-select" id="${selectId}" data-nodeId="${taskId}">
                                            <option value="0" selected>ToDo</option>

                                          </select>
                                    </div>

                                `;

        initializeGraph(true);

        function initializeGraph(physicsStatus) {
            // create a network
            let container = document.getElementById('situational-methods');

            // provide the data in the vis format
            let data = {
                nodes: nodes,
                edges: edges
            };
            let options = {
                physics: {
                    enabled: physicsStatus,
                    hierarchicalRepulsion: {
                        centralGravity: 0.0,
                        springLength: 300,
                        springConstant: 0.01,
                        nodeDistance: 300,
                        damping: 0.09
                    },
                    solver: 'hierarchicalRepulsion'
                },

                edges: {
                    length: 320// Longer edges between nodes.

                },
                layout: {
                    hierarchical: {
                        direction: "UD",
                        nodeSpacing: 350,
                    },
                },
                nodes: {
                    size: 35,
                    font: {
                        size: 20,
                        color: '#000000'
                    },
                    widthConstraint: {
                        maximum: 300
                    },
                    /*fixed: {
                        x: true,
                        y: true
                    },*/
                },
            };

            // initialize your network!
            network = new vis.Network(container, data, options);
            checkEvents();
        }

        function checkEvents() {

            network.on("doubleClick", function (params) {

                params.event = "[original event]";
                let parsedObject = JSON.parse(JSON.stringify(params, null, 4));
                let nodeId = parsedObject.nodes[0];

                let node = getNodeObject(nodeId);

                if (node === null) {
                    return;
                } else if (node.id !== 1 && ((node.shape === 'circle') || node.shape === 'diamond')) {

                    if (node.isHidden === true)
                        showAllSteps(nodeId);
                    else
                        hideAllSteps(nodeId);

                } else if (node.type === 'methodBlock') {

                    nodePopupToRefer = methodBlockPopup;
                    showNodePopup(methodBlockPopup);

                    let task = getTaskObject(parseInt(node.id));
                    methodBlockPopup.attr("data-nodeId", node.id);

                    //Clear previous contents from the dom
                    $(".input-artifacts").children().remove();
                    $(".output-artifacts").children().remove();
                    $(".roles").children().remove();
                    $(".tools").children().remove();
                    $("#status-box").children().remove();

                    /* Code to set the checkbox of task-can-be-started */

                    if (canStartThisTask(task).status === true && logs.length === 0) {
                        $("#task-can-be-started").prop('checked', true);
                    } else {
                        $("#task-can-be-started").prop('checked', false);
                    }

                    /* Code to implement status of the task */
                    let taskStatusId = Date.now() - 230; //230 just a random number to differentiate Date.now function
                    $("#status-box").append(taskStatus(taskStatusId, task.id));

                    if (!userHasWritePermission(task) || logs.length > 0 || canStartThisTask(task).status === false) {
                        $("#" + taskStatusId).css("width", "150px");
                        $("#" + taskStatusId).attr('disabled', true);
                        $("#add-comment").attr('disabled', true);
                    } else {

                        let options = [{status: 1, text: 'Under Progress'}, {status: 2, text: 'Finished'}];

                        options.forEach(function (option, index) {
                            if (parseInt(task.status) === option.status)
                                $("#" + taskStatusId).append(new Option(option.text, option.status, true, true));
                            else
                                $("#" + taskStatusId).append(new Option(option.text, option.status));
                        });
                    }

                    $("#name-of-method-block").html("<b>Name of method block::</b> " + task.label);
                    for (let [key, value] of Object.entries(task)) {
                        if (key === 'inputArtifacts' && task[key] !== "") {
                            task[key].forEach(function (artifact, index) {

                                let frontendId = Date.now() + index;

                                if (typeof artifact === 'object') {
                                    let uploadedArtifact = artifactOutputHTML('inputArtifact', artifact.name, nodeId, artifact.path, frontendId);
                                    $(".input-artifacts").append(uploadedArtifact);

                                    /* The frontendId here is assigned to a delete button */

                                    handleArtifactRemoval('inputArtifact', frontendId);
                                } else if (artifact !== "") {
                                    methodBlockPopup.find(".input-artifacts").append(artifactInputHTML('inputArtifact', artifact, task.id, frontendId));
                                }

                                if (!userHasWritePermission(task) || canStartThisTask(task).status === false || !('status' in task) || parseInt(task.status) === 0 || parseInt(task.status) === 2)
                                    $("#" + frontendId).attr('disabled', true);

                            });
                        }
                        if (key === 'outputArtifacts' && task[key] !== "") {
                            task[key].forEach(function (artifact, index) {

                                let frontendId = Date.now() + index + 100;

                                if (typeof artifact === 'object') {
                                    let uploadedArtifact = artifactOutputHTML('outputArtifact', artifact.name, nodeId, artifact.path, frontendId);
                                    $(".output-artifacts").append(uploadedArtifact);

                                    /* The frontendId here is assigned to a delete button */

                                    handleArtifactRemoval('outputArtifact', frontendId);
                                } else if (artifact !== "") {

                                    methodBlockPopup.find(".output-artifacts").append(artifactInputHTML('outputArtifact', artifact, task.id, frontendId));

                                    if (!userHasWritePermission(task) || canStartThisTask(task).status === false || !('status' in task) || parseInt(task.status) === 0 || parseInt(task.status) === 2)
                                        $("#" + frontendId).attr('disabled', true);
                                }

                            });
                        }
                        if (roles.includes(key)) { //such as platform-owner, vp of sales, etc
                            let selectId = key.replace(/ /g, '') + "-" + task.id;
                            methodBlockPopup.find(".roles").append(toBeFilledUpRole(key, task.id, selectId));

                            {% if not is_granted('ROLE_PROJECT_MANAGER') %}
                            $("#" + selectId).attr('disabled', true);
                            {% endif %}


                            if (value === "") //i.e when no members have been assigned to the role(key)
                            {
                                for (let [memberName, memberId] of Object.entries(teamMembers)) {
                                    $("#" + selectId).append(new Option(memberId, memberName));
                                }
                            } else if (typeof value === 'object') {
                                for (let [memberId, memberName] of Object.entries(teamMembers)) {
                                    if (memberName === value.memberName)
                                        $("#" + selectId).append(new Option(memberName, memberId, true, true));
                                    else
                                        $("#" + selectId).append(new Option(memberName, memberId));
                                }
                            }

                        }
                        if (key in tools) {
                            setTimeout(() => {
                                let selectId = Date.now();
                                methodBlockPopup.find(".tools").append(toBeFilledUpTool(key, selectId, task.id));

                                //Logic to update tools
                                $(".tool-select").on("change", function (e) {
                                    e.stopImmediatePropagation();
                                    let tool = $(this).find('option:selected').val();
                                    let toolType = $(this).attr("data-toolType");
                                    let nodeId = parseInt($(this).attr("data-nodeId"));

                                    let task = getTaskObject(nodeId);

                                    if (parseInt(tool) !== 0)
                                        task[toolType] = tool;
                                    else
                                        task[toolType] = "";

                                    updateJsonTasks();
                                    validateGraph();
                                });

                                {% if not is_granted('ROLE_PROJECT_MANAGER') %}
                                $("#" + selectId).attr('disabled', true);
                                {% endif %}

                                let toolsOptions = tools[key].split(",");

                                toolsOptions.forEach(function (item, index) {
                                    task[key] === item ? $("#" + selectId).append(new Option(item, item, true, true)) : $("#" + selectId).append(new Option(item, item));
                                });
                            }, 100);
                        }
                    }

                    //Logic to update artifacts
                    handleArtifactUpload();

                    $(".role-select").on("change", function () {
                        let role = $(this).attr("data-role");
                        let nodeId = parseInt($(this).attr("data-nodeId"));
                        let selectedMember = $(this).find('option:selected').text();
                        let selectedVal = $(this).find('option:selected').val();

                        let task = getTaskObject(nodeId);

                        if (parseInt(selectedVal) !== 0)
                            task[role] = {memberId: selectedVal, memberName: selectedMember};
                        else
                            task[role] = "";

                        updateJsonTasks(selectedVal, task);
                        validateGraph();
                    });

                    //Logic to update task status
                    let previousStatusText;
                    let previousStatusValue;
                    $(".status-select").on("focus click", function () {
                        previousStatusText = $(this).find('option:selected').text();
                        previousStatusValue = $(this).find('option:selected').val();

                    }).change(function () {

                        let taskId = $(this).attr("data-nodeId");
                        /* ToDo=0, Under Progress=1, Finished=2 */
                        let status = parseInt($(this).find('option:selected').val());
                        let node = getNodeObject(parseInt(taskId));
                        let task = getTaskObject(parseInt(taskId));
                        if (status === 0) {
                            task.color = "red";
                            task.status = 0;
                            node.color = "red";
                            methodBlockPopup.find('input[type="file"]').attr('disabled', true);
                            makeConsecutiveTasksRed(task);
                        } else if (status === 1) {
                            task.color = "rgba(248,151,8,0.76)";
                            task.status = 1;
                            node.color = "rgba(248,151,8,0.76)";
                            methodBlockPopup.find('input[type="file"]').attr('disabled', false);
                            makeConsecutiveTasksRed(task);
                        } else if (status === 2) {

                            let outputArtifactsThatHasNotBeenUploaded = []

                            //Check if all the output artifacts have been uploaded
                            for (let [key, value] of Object.entries(task)) {
                                if (key === 'outputArtifacts' && value !== "") {
                                    value.forEach(function (artifact, index) {
                                        if (typeof artifact !== 'object')
                                            outputArtifactsThatHasNotBeenUploaded.push(artifact);
                                    });
                                }
                            }

                            if (outputArtifactsThatHasNotBeenUploaded.length > 0) {
                                let message = "These output artifacts: ";
                                outputArtifactsThatHasNotBeenUploaded.forEach(function (artifact, index) {
                                    if (index === 0)
                                        message = message + artifact;
                                    else
                                        message = message + "," + artifact;
                                });
                                message = message + " has not been uploaded and hence status can not be changed to finished.";
                                alert(message);
                                $(this).val(previousStatusValue);
                                return false;
                            }

                            task.color = "#54f856";
                            task.status = 2;
                            node.color = "#54f856";
                        }

                        changeParentStatusAfterUpdateOfTaskStatus(task);
                        console.log(tasks);
                        updateJsonNodes();
                        updateJsonTasks();
                    });
                }

                $(".close").on("click", function (e) {
                    e.stopImmediatePropagation();
                    closeNodePopup(nodePopupToRefer);
                });
            });
        }


        /*-----------------------------Helper Functions ----------------------------------*/

        function getNodeObject(nodeId) {
            let node = null;
            nodes.forEach(function (item, index) {
                if (item.id === nodeId)
                    node = item;
            });
            return node;
        }

        function getTaskObject(taskId) {
            let node = null;
            tasks.forEach(function (item, index) {
                if (item.id === taskId)
                    node = item;
            });
            return node;
        }

        function closeNodePopup(divToClose) {
            divToClose.css("display", "none");
            $(".container-fluid").children().not(divToClose).css({
                "pointer-events": "auto",
            });
            $(".container-fluid").children().not(divToClose).css("opacity", "1");

            if (divToClose === nodePopup) {

                $("#recommended-graphs, #recommended-methods").css({
                    'pointer-events': 'auto',
                    'opacity': '1'
                });
            }
        }

        function showNodePopup(divToShow) {

            if (divToShow === nodePopup) {
                $("#spinner-2").css("display", "block");
                $("#add-these-blocks").prop("disabled", true);
                $("#recommended-graphs").children().remove();
                $("#recommended-methods").children().remove();
                methodRecommendationCounter++;
            }

            $(".container-fluid").children().not(divToShow).css({
                "pointer-events": "none",
                "opacity": "0.4"
            });
            divToShow.css("display", "block");
            nodePopupToRefer = divToShow;
        }

        function hideAllSteps(rootNodeId) {

            getNodeObject(rootNodeId).isHidden = true;
            edges.forEach(function (edge, index) {
                if (edge.from === rootNodeId && edge.color === "red") {
                    let node = getNodeObject(edge.to);
                    if (node) {
                        node.hidden = true;
                        hideAllSteps(parseInt(node.id));
                    }
                }
            });
            totalHiddenTrees++;
            initializeGraph(false);
        }

        function showAllSteps(rootNodeId) {
            /*getNodeObject(rootNodeId).color = "#bababa";*/
            getNodeObject(rootNodeId).isHidden = false;
            edges.forEach(function (edge, index) {
                if (edge.from === rootNodeId && edge.color === "red") {
                    let node = getNodeObject(edge.to);
                    if (node) {
                        node.hidden = false;
                        showAllSteps(parseInt(node.id));
                    }
                }
            });
            totalHiddenTrees--;

            if (totalHiddenTrees === 0) {
                initializeGraph(true);
            } else
                initializeGraph(false);
        }


        function getLocalRootNodeObject(nodeId) {

            let localRootNode = null;
            edges.forEach(function (edge, index) {
                if (edge.arrows === "from" && edge.to === parseInt(nodeId) && edge.arrows === "from") {
                    if (parseInt(edge.from) !== 1)
                        localRootNode = getLocalRootNodeObject(parseInt(edge.from));
                    else
                        localRootNode = getNodeObject(parseInt(edge.to));
                }
            });
            return localRootNode;
        }

        function checkIfLocalSupremeRootNodeReadyToBeExecuted(childNode) //This was previously a processType node
        {
            let localSupremeNode = getLocalRootNodeObject(childNode.id);

            let allLocalChildren = [];
            //Get all the edged nodes from child to local supreme and check if they are ready
            edges.forEach(function (edge, index) {
                if (edge.arrows === 'from' && parseInt(edge.from) === parseInt(localSupremeNode.id) && edge.color === "red")
                    allLocalChildren.push(getNodeObject(parseInt(edge.to)));
            });

            let allChildNodesAreActive = true;
            allLocalChildren.forEach(function (childNode, index) {
                if (childNode.color !== "#f86262")
                    allChildNodesAreActive = false;
            });

            if (allChildNodesAreActive)
                localSupremeNode.color = "#f86262";

            initializeGraph(true);
        }


        function refreshedNodeValue() {
            return temporaryNode;
        }

        function enactmentValidation() {
            tasks.forEach(function (task, index) {
                for (let [key, value] of Object.entries(task)) {

                }
            });
        }

        function updateJsonTasks(memberId = null, task = null) {
            $.ajax({
                type: 'POST',
                url: '{{ path('task_update') }}',
                data: {
                    method_id: "{{ situationalMethod.id }}",
                    tasks: tasks,
                    memberId: memberId,
                    task: task,
                    graphName: task == null ? null : getLocalRootNodeObject(parseInt(task.id)).label,
                    update_type: 'update_jsonTasks'
                },
                success: function (response) {
                    let obj = JSON.parse(JSON.stringify(response));
                }
            });
        }

        function updateJsonNodes() {
            $.ajax({
                type: 'POST',
                url: '{{ path('task_update') }}',
                data: {
                    method_id: "{{ situationalMethod.id }}",
                    update_type: 'update_jsonNodes',
                    nodes: nodes
                },
                success: function (response) {
                    let obj = JSON.parse(JSON.stringify(response));
                }
            });
        }

        function userHasWritePermission(task) {
            let haveWritePermission = false;

            let currentUser = "{{ app.user.employeeName ~" : "~ app.user.implodedRoles }}"

            for (let [role, object] of Object.entries(task)) {
                if (roles.includes(role)) {
                    if (object !== "" && object.memberName === currentUser)
                        haveWritePermission = true;
                }
            }
            {% if is_granted('ROLE_PROJECT_MANAGER') %}
            haveWritePermission = true;
            {% endif %}

            return haveWritePermission;
        }

        function handleArtifactRemoval(artifactType, buttonId) {
            $("#" + buttonId).on("click", function () {
                let taskId = $(this).attr("data-id");
                let artifactName = $(this).attr("data-artifact");
                let filePath = $(this).attr("data-filePath");
                let fileName = filePath.replace("/images/artifacts/", "");

                let superParent = $(this).parent().parent();
                $(this).parent().remove();
                superParent.append(artifactInputHTML(artifactType, artifactName, taskId, buttonId));
                handleArtifactUpload();

                let artifactPlural = artifactType + 's';

                let task = getTaskObject(parseInt(taskId));
                let node = getNodeObject(parseInt(taskId));

                task[artifactPlural].forEach(function (artifact, index) {

                    if (typeof artifact === 'object' && artifact.name === artifactName && artifact.path === filePath) {
                        task[artifactPlural].splice(index, 1, artifactName);
                    }
                });

                $.ajax({
                    type: 'POST',
                    url: '{{ path('task_update') }}',
                    data: {
                        method_id: "{{ situationalMethod.id }}",
                        tasks: tasks,
                        fileName: fileName,
                        update_type: 'delete_artifact'
                    },
                    success: function (response) {
                        let obj = JSON.parse(JSON.stringify(response));

                    }
                });

                task.color = "rgba(248,151,8,0.76)";
                task.status = 1;
                node.color = "rgba(248,151,8,0.76)";
                changeParentStatusAfterUpdateOfTaskStatus(task);
                updateJsonNodes();
                updateJsonTasks();
            });
        }

        //Logic to update artifacts
        function handleArtifactUpload() {

            $(".custom-file-input").on("change", function (e) {
                e.stopImmediatePropagation();
                let nodeId = $(this).attr("data-nodeId");
                let task = getTaskObject(parseInt(nodeId));
                let artifact = $(this).data("artifact");
                let artifactType = $(this).attr("data-artifactType");

                let form = new FormData();
                form.append("file_name", $(this)[0].files[0]);
                form.append('update_type', 'upload_artifact');

                let currentSelector = $(this);

                $.ajax({
                    type: 'post',
                    url: '{{ path('task_update') }}',
                    processData: false,
                    contentType: false,
                    data: form,
                    success: function (response) {
                        let obj = JSON.parse(JSON.stringify(response));
                        if (obj.status === 'success') {
                            let filePath = "{{ asset('images/artifacts') }}" + "/" + obj.fileName;
                            currentSelector.parent().parent().remove();

                            let removeButtonId = Date.now();
                            let uploadedArtifact = artifactOutputHTML(artifactType, artifact, nodeId, filePath, removeButtonId);

                            artifactType === 'inputArtifact' ? $(".input-artifacts").append(uploadedArtifact) :
                                $(".output-artifacts").append(uploadedArtifact);

                            handleArtifactRemoval(artifactType, removeButtonId);

                            if (artifactType === 'inputArtifact') {
                                for (let [key, value] of Object.entries(task)) {
                                    if (key === 'inputArtifacts' && task[key] !== "") {
                                        task[key].forEach(function (ourArtifact, index) {
                                            if (ourArtifact === artifact)
                                                task[key].splice(index, 1, {name: artifact, path: filePath});
                                        });
                                    }
                                }
                            }
                            if (artifactType === 'outputArtifact') {
                                for (let [key, value] of Object.entries(task)) {
                                    if (key === 'outputArtifacts' && task[key] !== "") {
                                        task[key].forEach(function (ourArtifact, index) {
                                            if (ourArtifact === artifact)
                                                task[key].splice(index, 1, {name: artifact, path: filePath});
                                        });
                                    }
                                }
                            }

                            updateJsonTasks();
                        }
                    },
                });
            });

        }

        function validateGraph() {
            logs = [];
            tasks.forEach(function (task, index) {
                for (let [key, value] of Object.entries(task)) {
                    let localGraphName = getLocalRootNodeObject(task.id).label;
                    if (roles.includes(key) && value === "")
                        logs.push({
                            task: task,
                            msg: key + " in \"" + task.label + "\" in graph " + localGraphName + " has not been assigned any team member."
                        });
                    if (key in tools && value === "")
                        logs.push({
                            task: task,
                            msg: key + " in \"" + task.label + "\" in graph " + localGraphName + " has not been selected."
                        });
                }
            });

            if (logs.length > 0) {
                $(".validation-banner-1").css("display", "block");
                nodes.forEach(function (node, index) {
                    node.color = "#bababa";
                });
                $("#logger").find("ul").children().remove();
                logs.forEach(function (log, index) {
                    $("#logger").find("ul").append("<li>" + log.msg + "</li>");
                });
                initializeGraph(true);
            } else if (logs.length === 0) {
                $("#logger").find("ul").children().remove();
                $(".validation-banner-1").css("display", "none");

                nodes.forEach(function (node, index) {
                    let task = getTaskObject(parseInt(node.id));
                    if (task != null && 'color' in task && task.color !== "#bababa") {
                        node.color = task.color;
                        changeParentStatusAfterUpdateOfTaskStatus(task);
                    } else if (node.color === "#bababa")
                        node.color = "red";
                });
                initializeGraph(true);
            }
        }

        function changeParentStatusAfterUpdateOfTaskStatus(task) {
            if (parseInt(task.status) === 1) {

                let parent = getParent(task.id);

                if (parent) {
                    parent.status = 1;
                    parent.color = "rgba(248,151,8,0.76)";
                    changeParentStatusAfterUpdateOfTaskStatus(parent);
                }

            } else if (task.status === 0) {
                //change parent status to 0 only if all the other children are 0

                let parentStatus = 0;

                let parentOfTask = getParent(task.id);

                if (parentOfTask) {

                    let childrenOfParent = getChildren(parentOfTask.id);
                    childrenOfParent.forEach(function (child, index) {
                        if (child != null && child.shape === "box") {
                            let equivalentTask = getTaskObject(parseInt(child.id));
                            if (equivalentTask != null && 'status' in equivalentTask && (parseInt(equivalentTask.status) === 1 || parseInt(equivalentTask.status) === 2))
                                parentStatus = 1;
                        } else if (child != null && (child.color === "rgba(248,151,8,0.76)" || child.color === "#54f856")) {
                            parentStatus = 1;
                        }

                    });

                    if (parentStatus === 0)
                        parentOfTask.color = "red";
                    else
                        parentOfTask.color = "rgba(248,151,8,0.76)";
                    parentOfTask.status = parentStatus;

                    changeParentStatusAfterUpdateOfTaskStatus(parentOfTask);
                }
            } else if (task.status === 2) {
                let parentOfTask = getParent(task.id);

                if (parentOfTask) {
                    let childrenOfParent = getChildren(parentOfTask.id);

                    let allChildrenOfParentAreGreen = true;

                    childrenOfParent.forEach(function (child, index) {
                        if (child != null && child.shape === "box") {
                            let equivalentTask = getTaskObject(parseInt(child.id));
                            if (equivalentTask != null && (('status' in equivalentTask && parseInt(equivalentTask.status) !== 2) || !('status' in equivalentTask)))
                                allChildrenOfParentAreGreen = false;
                        } else if (child != null && child.color !== "#54f856") {
                            allChildrenOfParentAreGreen = false;
                        }
                    });

                    if (allChildrenOfParentAreGreen) {
                        parentOfTask.color = "#54f856";
                        parentOfTask.status = 2;
                        changeParentStatusAfterUpdateOfTaskStatus(parentOfTask);
                    }
                }
            }

            initializeGraph(true);
        }

        function getParent(nodeId) {
            let parent = null;
            edges.forEach(function (edge, index) {
                if (edge.arrows === "from" && parseInt(edge.to) === parseInt(nodeId)) {
                    parent = getNodeObject(parseInt(edge.from));
                }
            });
            return parent;
        }

        function getChildren(nodeId) {
            let children = [];
            edges.forEach(function (edge, index) {
                if (edge.arrows === "from" && parseInt(edge.from) === parseInt(nodeId)) {
                    children.push(getNodeObject(parseInt(edge.to)));
                }
            });
            return children;
        }

        function canStartThisTask(task) {

            let taskCanBeStarted = {status: true, inputArtifactMessages: "", outputArtifactMessages: ""};
            let neededInputArtifacts = [];
            let producedOutputArtifacts = [];

            let localGraph = getLocalRootNodeObject(task.id);

            for (let [key, value] of Object.entries(task)) {
                if (key === 'inputArtifacts' && value !== "") {

                    value.forEach(function (artifact, index) {
                        neededInputArtifacts.push(artifact);
                    });

                }
                if (key === 'outputArtifacts' && value !== "") {
                    value.forEach(function (artifact, index) {
                        producedOutputArtifacts.push(artifact);
                    });
                }
            }

            neededInputArtifacts.forEach(function (inputArtifact, index) {
                tasks.forEach(function (myTask, index) {

                    if (getLocalRootNodeObject(myTask.id).label === localGraph.label) {
                        for (let [key, value] of Object.entries(myTask)) {
                            if (key === 'outputArtifacts' && value !== "") {
                                value.forEach(function (outputArtifact, index) {
                                    if (typeof outputArtifact === "string" && outputArtifact === inputArtifact && parseInt(myTask.status) !== 2) {
                                        taskCanBeStarted.status = false;
                                        taskCanBeStarted.inputArtifactMessages += outputArtifact + " in step '" + myTask.label + "' has not been uploaded yet.";
                                    } else if (typeof outputArtifact === "object" && outputArtifact.name === inputArtifact && (parseInt(myTask.status) === 1||parseInt(myTask.status)===0)) {
                                        taskCanBeStarted.status = false;
                                        taskCanBeStarted.inputArtifactMessages += "'" + outputArtifact.name + "'has been uploaded in Step '" + myTask.label + "' in graph '" + localGraph.label + "'," +
                                            " however  the step is still under progress.";
                                    } else if (typeof outputArtifact === "object" && outputArtifact.name === inputArtifact && parseInt(myTask.status) === 2) {
                                        taskCanBeStarted.status = true;
                                        taskCanBeStarted.inputArtifactMessages += "Download input artifact '" + outputArtifact.name + "' from step '" + myTask.label + "'";
                                    }
                                });
                            }
                        }
                    }

                });
            });

            producedOutputArtifacts.forEach(function (outputArtifact, index) {
                tasks.forEach(function (myTask, index) {
                    if (getLocalRootNodeObject(myTask.id).label === localGraph.label) {
                        for (let [key, value] of Object.entries(myTask)) {
                            if (key === 'inputArtifacts' && value !== "") {
                                if (typeof value !== "object") {
                                    value.forEach(function (inputArtifact, index) {
                                        if (typeof inputArtifact === "string" && outputArtifact === inputArtifact) {
                                            taskCanBeStarted.outputArtifactMessages += "'" + outputArtifact + "' is used in step '" + myTask.label + "'.";
                                        }
                                    });
                                } else if (typeof value == "object") {
                                    for (let [key, inputArtifact] of Object.entries(value)) {
                                        if (typeof inputArtifact === "string" && outputArtifact === inputArtifact) {
                                            taskCanBeStarted.outputArtifactMessages += "'" + outputArtifact + "' is used in step '" + myTask.label + "'.";
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            });

            return taskCanBeStarted;
        }

        function makeConsecutiveTasksRed(task) {

            let nextNode = null;

            edges.forEach(function (edge,index) {
                if(edge.arrows==="to" && parseInt(edge.from)===parseInt(task.id) && !('smooth' in edge))
                    nextNode=getNodeObject(parseInt(edge.to));
            });

            if(nextNode)
            {
                if(nextNode.shape==="diamond")
                {
                    nextNode.color="red";
                    nextNode.status = 0;

                    let childNodes = getChildren(nextNode.id);
                    childNodes.forEach(function (childNode,index) {
                        childNode.status=0;
                        childNode.color="red";
                        getTaskObject(childNode.id).status=0;
                        getTaskObject(childNode.id).color="red";
                    });
                    makeConsecutiveTasksRed(nextNode);
                }
                else if(nextNode.shape==="box")
                {
                    nextNode.status=0;
                    nextNode.color="red";
                    getTaskObject(nextNode.id).status=0;
                    getTaskObject(nextNode.id).color="red";
                    makeConsecutiveTasksRed(nextNode);
                }
                else if(nextNode.shape==="circle")
                {
                    let children = getChildren(nextNode);
                    children.forEach(function (child,index) {
                        makeConsecutiveTasksRed(child);
                    });
                }
                initializeGraph(true);
            }

        }
    </script>
{% endblock %}
