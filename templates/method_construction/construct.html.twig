<html>
<head>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <script type="text/javascript" src="{{ asset('js/jquery.min.js') }}"></script>
    <link href="{{ asset('css/bootstrap.css') }}" rel="stylesheet" type="text/css">
    <style type="text/css">

        html, body {
            height: 100%;
            width: 100%;
        }

        #mynetwork {
            width: 77%;
            height: 100%;
            border: 1px solid lightgray;
        }

        .blink_me {
            animation: blinker 1s linear infinite;
            animation-iteration-count: 3;
        }

        @keyframes blinker {
            50% {
                opacity: 0;
            }
        }
    </style>
</head>
<body>


<div class="d-flex flex-row w-100 h-75">

    <div id="mynetwork" data-nodes="{{ graph.nodes }}"
         data-edges="{{ graph.edges }}"></div>

</div>


<div class="d-flex flex-row">
    <div class="ml-3  d-flex flex-row" style="width: 76%;">
        <span><b>Log:</b></span> &nbsp
        <span id="message-box"></span>
    </div>
</div>


</div>


{# Modal #}
<div class="modal-dialog" role="document"
     style="position: absolute; top:10%; left:10%; display: none;" id="node-popup" data-nodeId="">
    <div class="modal-content">
        <div class="modal-header">
            <label for="modal-process-type">Change Process Type of the Step</label>
            <select class="form-control" id="modal-process-type">
                <option value="">Change process type</option>
                {% for processType in processTypes %}
                    <option value={{ processType.id }}>{{ processType.name }}</option>
                {% endfor %}
            </select>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body d-flex flex-column">
            <label>Height of the step</label>
            <div class="d-flex flex-row justify-content-between">
                <button class="btn btn-sm btn-dark rounded-circle" id="decrease-level">-</button>
                <span id="level"></span>
                <button class="btn btn-sm btn-primary rounded-circle" id="increase-level">+</button>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" id="remove-step">Remove Step</button>
        </div>
    </div>
</div>


{#----------------------------------------------JavsScript Section-------------------------------#}
<script>

    let nodes = [];
    let edges = [];
    let nodesInDatabase = JSON.parse(JSON.stringify($("#mynetwork").data("nodes")));
    let edgesInDatabase = JSON.parse(JSON.stringify($("#mynetwork").data("edges")));

    // create an array with nodes
    let network = null;
    let messageBox = $("#message-box");
    let nodePopup = $("#node-popup");
    let level = $("#level");
    let body = $("body");
    let processTypeInModal = $("#modal-process-type");
    let stepsAreHidden = false;

    $("#bmd_graph_situationalFactors").css("height", "30%");

    nodesInDatabase.forEach(function (item, index) {
        item.id = parseInt(item.id);
        item.level = parseInt(item.level);
        item.margin = parseInt(item.margin);
        nodes.push(item);
    });

    edgesInDatabase.forEach(function (item, index) {
        item.from = parseInt(item.from);
        item.to = parseInt(item.to);
        edges.push(item);
    });

    initializeGraph();

    function initializeGraph() {
        // create a network
        let container = document.getElementById('mynetwork');

        // provide the data in the vis format
        let data = {
            nodes: nodes,
            edges: edges
        };
        let options = {
            physics: {
                enabled: false,
            },
            edges: {
                length: 300 // Longer edges between nodes.

            },
            layout: {
                hierarchical: {
                    direction: "UD",
                    nodeSpacing: 380
                },
            },
            nodes: {
                size: 35,
                font: {
                    size: 20,
                    color: '#000000'
                },
                widthConstraint: {
                    maximum: 300
                },
                /*fixed: {
                    x: true,
                    y: true
                },*/
            },
        };

        // initialize your network!
        network = new vis.Network(container, data, options);
        checkEvents();
    }

    function checkEvents() {
        network.on("doubleClick", function (params) {
            body.not(nodePopup).css({
                "pointer-events": "none",
            });
            body.children().not(nodePopup).css("opacity", "0.4");

            params.event = "[original event]";
            let parsedObject = JSON.parse(JSON.stringify(params, null, 4));
            let nodeId = parsedObject.nodes[0];

            let node = getNodeObject(nodeId);

            if (node === null || node.shape !== 'box') {
                closeNodePopup();
                if (nodes.length > 1 && !stepsAreHidden) {
                    hideAllSteps(nodeId);
                } else {
                    showAllSteps(nodeId);
                }

                return;
            }

            nodePopup.css("display", "block");
            nodePopup.attr("data-nodeId", nodeId);
            processTypeInModal.val(node.tableId);
            level.html(node.level);

            $(".close").on("click", function () {
                closeNodePopup();
            });
        });

        network.on("showPopup", function (params) {
            console.log("hoverNode Event:", params);
        });
        network.on("hoverNode", function (params) {
            console.log("hoverNode Event:", params);
        });
    }


    bmdGraphSaveButton.hover(function () {
        setTimeout(function () {
            $.ajax({
                type: 'POST',
                url: '{{ path('set_graph_nodes_in_session') }}',
                data: {
                    nodes: nodes,
                    edges: edges
                },
                success: function (response) {
                    let obj = JSON.parse(JSON.stringify(response));
                    console.log(obj);
                }
            });

        }, 200);
    });


    /*-------------------------Helper Functions----------------------*/

    function removeStep(node) {

        let idOfProcessType = node.id;
        let nameOfProcessType = node.label.replace("<<", "").replace(">>", "");

        let nodeFoundAndRemoved = false;

        if (nodeIsPartOfAnEdge(getNodeIdOfStep(idOfProcessType))) {
            messageBox.html("<span class='text-danger'>" + nameOfProcessType + " is part of a prerequisite edge. Delete the edge first to delete the node!</span>");
            return false;
        }

        nodes.forEach(function (item, index) {
            if (item.id === idOfProcessType) {
                nodes.splice(index, 1);
                nodeFoundAndRemoved = true;
            }
        });

        if (nodeFoundAndRemoved) {
            edges.forEach(function (item, index) {
                if (item.to === getNodeIdOfStep(idOfProcessType))
                    edges.splice(index, 1);
            });
            messageBox.html("<span class='text-success'>Okay!! Step with " + nameOfProcessType + " was removed from the graph *_*</span>");
            initializeGraph();
        } else {
            messageBox.html("<span class='text-danger'>" + nameOfProcessType + " is not there in the graph :/</span>");
        }

        return true;
    }

    function updatedNameOfProcessTypeForEdgeOptions(nameOfNode) {
        let labelIndex = 0;
        nodes.forEach(function (item, index) {

            if (item.label === "<<" + nameOfNode + ">>") {
                labelIndex++;
            }
        });
        if (labelIndex === 1)
            return nameOfNode;
        else
            return nameOfNode + "-" + labelIndex;
    }

    function nodeExistInGraph(id) {
        let existInGraph = false;
        nodes.forEach(function (item, index) {
            if (item.id === id)
                existInGraph = true;
        });
        return existInGraph;
    }


    //If an edge from a node exists
    function edgeFromThisNodeExist(idOfNode) {
        let edgeFromNodeExist = false;
        edges.forEach(function (item, index) {
            if (item.from === idOfNode)
                edgeFromNodeExist = true;
        });
        return edgeFromNodeExist;
    }

    function getNodeIdOfStep(idOfProcessType) {
        let nodeId = null;
        nodes.forEach(function (item, index) {
            if (item.id === idOfProcessType)
                nodeId = item.id;
        });
        return nodeId;
    }

    function getIndexOfNodeObject(nodeId) {
        let indexOfObject = null;
        nodes.forEach(function (item, index) {
            if (item.id === nodeId)
                indexOfObject = index;
        });
        return indexOfObject;
    }

    function nodeIsPartOfAnEdge(idOfNode) {
        let nodeHasEdge = false;
        edges.forEach(function (item, index) {
            if ((item.from !== 1 && item.to === idOfNode) || item.from === idOfNode)
                nodeHasEdge = true;
        });
        return nodeHasEdge;
    }

    function nodeIsInBetweenAnEdge(idOfNode) {
        let nodeIsBetweenAnEdge = false;
        edges.forEach(function (item, index) {
            if (item.arrows === "to" && item.from < idOfNode && item.to > idOfNode)
                nodeIsBetweenAnEdge = true;
        });
        return nodeIsBetweenAnEdge;
    }

    function getNodeObject(nodeId) {
        let node = null;
        nodes.forEach(function (item, index) {
            if (item.id === nodeId)
                node = item;
        });
        return node;
    }

    function getNameOfProcessTypeThroughNodID(nodeId) {
        let name = null;
        nodes.forEach(function (item, index) {
            if (item.id === nodeId) {
                name = item.label.replace("<<", "").replace(">>", "");
            }
        });
        return name;
    }

    function closeNodePopup() {
        nodePopup.css("display", "none");
        body.not(nodePopup).css({
            "pointer-events": "auto",
        });
        body.children().not(nodePopup).css("opacity", "1");
    }

    function hideAllSteps(rootNode) {
        nodes[0].title = "All steps are hidden";
        nodes[0].color = "brown";

        edges.forEach(function (edge, index) {
            if (edge.from === rootNode && edge.color === "red")
                getNodeObject(edge.to).hidden = true;
        });
        initializeGraph();
        stepsAreHidden = true;
        console.log('steps hidden: ' + stepsAreHidden);
    }

    function showAllSteps(rootNode) {
        console.log(rootNode, nodes[0]);
        delete nodes[0].title;
        nodes[0].color = "#bababa";

        edges.forEach(function (edge, index) {
            if (edge.from === rootNode && edge.color === "red")
                getNodeObject(edge.to).hidden = false;
        });
        stepsAreHidden = false;
        initializeGraph();
        console.log('steps hidden: ' + stepsAreHidden);
    }


</script>
</body>
</html>