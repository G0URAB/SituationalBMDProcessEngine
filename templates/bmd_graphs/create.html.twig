<html>
<head>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <script type="text/javascript" src="{{ asset('js/jquery.min.js') }}"></script>
    <link href="{{ asset('css/bootstrap.min.css') }}" rel="stylesheet" type="text/css">
    <style type="text/css">

        html, body {
            height: 100%;
            width: 100%;
        }

        #mynetwork {
            width: 77%;
            height: 100%;
            border: 1px solid lightgray;
        }

        .blink_me {
            animation: blinker 1s linear infinite;
            animation-iteration-count: 3;
        }

        @keyframes blinker {
            50% {
                opacity: 0;
            }
        }
    </style>
</head>
<body>

<div class="d-flex flex-row w-100 h-75">

    <div id="mynetwork"></div>

    <div id="control-panel" class="p-1" style="width: 23%;">

        {# Set Name of the graph #}
        <div class="border border-dark rounded mt-2">
            <div class="form-group">
                <label for="name-of-graph">Name of the graph</label>
                <input type="text" class="form-control" id="name-of-graph" placeholder="Apple Handset Business Graph">
            </div>
            <div class="form-group">
                <label for="name-of-root-node">Name of the root node</label>
                <input type="text" class="form-control" id="name-of-root-node" placeholder="Apple Handset Business">
            </div>
            <button type="button" class="btn btn-dark btn-sm" id="set-graph-name-and-root-node">Set</button>
        </div>

        {# Add Process Types #}
        <div class="border border-dark rounded mt-2">
            <div class="form-group">
                <label for="process-type">Add/Remove a Process Type</label>
                <select class="form-control" id="process-type">
                    <option value="">Select a process type</option>
                    {% for processType in processTypes %}
                        <option value={{ processType.id }}>{{ processType.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="d-flex flex-row justify-content-center">
                <button type="button" class="btn btn-primary btn-sm" id="add-processType">Add</button>
            </div>
        </div>

        {# Add Prerequisites #}
        <div>
            <div class="border border-dark rounded mt-2">
                <h6>Add/Remove Prerequisite Edge</h6>
                {# From #}
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="from-process-type">From Process Type</label>
                    </div>
                    <select class="custom-select" id="from-process-type">

                    </select>
                </div>
                {# To #}
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="to-process-type">To Process Type</label>
                    </div>
                    <select class="custom-select" id="to-process-type">

                    </select>
                </div>
                <div class="d-flex flex-row justify-content-around">
                    <button type="button" class="btn btn-primary btn-sm" id="add-prerequisite">Add</button>
                    <button type="button" class="btn btn-danger btn-sm" id="remove-prerequisite">Remove</button>
                </div>
            </div>
        </div>
    </div>
</div>


{# Buttons #}
<div class="d-flex flex-row">
    <div class="ml-3  d-flex flex-row" style="width: 50%;">
        <span><b>Log:</b></span> &nbsp
        <span id="message-box"></span>
    </div>
    <div class="d-flex flex-row justify-content-end pr-1" style="width: 26%;">
        <button class="btn btn-success" type="button">Save Graph</button>
        <a href="{{ path('bmd_graphs') }}" class="btn btn-warning ml-2">Cancel</a>
    </div>
</div>

{# Instruction #}
<div class="mt-1 bg-dark d-flex flex-column p-2" style="width: 77%">
    <h5 class="text-warning">Instructions</h5>
    <div class="d-flex flex-row text-white">
        <span>1. <b>Example graph name:</b> London Crime Resolver Graph</span>
        <span class="ml-4"><b>Example root node name:</b> Resolve London Crime</span>
    </div>
    <div class="mt-1 text-white d-flex flex-column">
        <span>2. All the process types <b><u>should</u></b> be put in a sequence. </span>
        <span>3. The sequence direction should be from left to right!!</span>
        <span>4. <b class="text-danger">Red arrow</b> indicates a child sub process type and
                 <b class="text-primary">blue arrow</b> indicates a prerequisite.</span>
        <span>5. If two processes types can be implemented <u>in parallel then there is no prerequisite!</u> </span>
    </div>
</div>

{# Modal #}

<div class="modal-dialog" role="document"
     style="position: absolute; top:10%; left:10%; display: none;" id="node-popup" data-node="">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title"></h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body d-flex flex-column">
            <label>Level of the node</label>
            <div class="d-flex flex-row justify-content-between">
                <button class="btn btn-sm btn-dark rounded-circle" id="decrease-level">-</button>
                <span id="level"></span>
                <button class="btn btn-sm btn-primary rounded-circle" id="increase-level">+</button>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" id="remove-processType">Remove Process Type</button>
        </div>
    </div>
</div>


{#----------------------------------------------JavsScript Section-------------------------------#}
<script>

    // create an array with nodes
    let nodes = [
        {id: 1, label: 'Give me a name!', level: '0', shape: 'circle', color: '#bababa', margin: 8},
    ];
    let edges = [];
    let network = null;
    let messageBox = $("#message-box");
    let isSetGraphAndRootNode = true;
    let processType = $("#process-type");
    let fromProcessType = $("#from-process-type");
    let toProcessType = $("#to-process-type");
    let nodePopup = $("#node-popup");
    let level = $("#level");
    let body = $("body");

    $("input").val(""); //On page reload clear input fields
    processType.val(""); //Reset on reload
    fromProcessType.val(""); //Reset on reload
    toProcessType.val(""); //Reset on reload

    initializeGraph();

    function initializeGraph() {
        // create a network
        let container = document.getElementById('mynetwork');

        // provide the data in the vis format
        let data = {
            nodes: nodes,
            edges: edges
        };
        let options = {
            physics: {
                enabled: false,
            },
            edges: {
                length: 300 // Longer edges between nodes.

            },
            layout: {
                hierarchical: {
                    direction: "UD",
                    nodeSpacing: 380
                },
            },
            nodes: {
                size: 35,
                font: {
                    size: 20,
                    color: '#000000'
                },
                /*fixed: {
                    x: true,
                    y: true
                },*/
            },
        };

        // initialize your network!
        network = new vis.Network(container, data, options);
    }

    function checkEvents() {
        network.on("click", function (params) {

            body.not(nodePopup).css({
                "pointer-events": "none",
            });
            body.children().not(nodePopup).css("opacity", "0.4");

            params.event = "[original event]";
            let parsedObject = JSON.parse(JSON.stringify(params, null, 4));
            let nodeId = parsedObject.nodes[0];
            let node = getNodeObject(nodeId);
            nodePopup.css("display", "block");
            nodePopup.attr("data-node", nodeId);
            level.html(node.level);

            $("#increase-level").on("click", function () {
                node.level++;
                level.html(node.level);
                initializeGraph();
            });

            $("#decrease-level").on("click", function () {
                node.level--;
                level.html(node.level);
                initializeGraph();
            });

            $(".close").on("click", function () {
                closeNodePopup();
            });

            $("#remove-processType").on("click", function () {
                if (confirm("Are you sure to delete: " + node.label)) {
                    removeProcessType(getNameOfProcessTypeThroughNodID(node.id));
                    closeNodePopup();
                    $('#to-process-type option').each(function() {
                        if ( $(this).val() === node.tableId.toString() ) {
                            $(this).remove();
                        }
                    });
                    $('#from-process-type option').each(function() {
                        if ( $(this).val() === node.tableId.toString() ) {
                            $(this).remove();
                        }
                    });
                }
            });
        });
    }


    $("#set-graph-name-and-root-node").on("click", function () {
        let graphName = $("#name-of-graph").val();
        let rootNodeName = $("#name-of-root-node").val();

        if (graphName.length < 5) {
            document.getElementById("message-box").innerHTML = "Please give a valid name for the graph!!";
            return false;
        }
        if (rootNodeName.length < 5) {
            document.getElementById("message-box").innerHTML = "Please give a valid name for the root node of the graph!!";
            return false;
        }

        isSetGraphAndRootNode = true;

        for (let i = 0; i < nodes.length; i++) {
            let node = nodes[i];
            if (node.level === '0') {
                node.label = rootNodeName;
                document.getElementById("message-box").innerHTML = "Root node's name was set!!";
                initializeGraph();
            }
        }

    });

    $("#add-processType").on("click", function () {

        let IdOfProcessType = parseInt(processType.val());
        let nameOfProcessType = processType.find(":selected").text();

        if (processType.val() === "") {
            messageBox.html("<span class='text-danger'>Please select a process type to add!!</span>");
            return;
        }

        if (isSetGraphAndRootNode === false) {
            document.getElementById("message-box").innerHTML = "<span class='text-danger'>Please give a valid name for the graph and the root node first</span>";
            return false;
        }

        let processTypeExist = false;

        nodes.forEach(function (item, index) {
            if (item.label === nameOfProcessType) {
                messageBox.html("<span class='text-danger'>The label " + nameOfProcessType + " is already there in the graph :/</span>");
                processTypeExist = true;
            }
        });

        if (processTypeExist)
            return;

        let idOfLastNode = parseInt((nodes[nodes.length - 1]).id);

        let newNode = {
            id: idOfLastNode + 1,
            label: "<<" + nameOfProcessType + ">>",
            level: 3,
            shape: 'box',
            color: '#bababa',
            margin: 8,
            tableId: IdOfProcessType
        };
        nodes.push(newNode);

        let newEdge = {
            from: 1, to: newNode.id, arrows: "from", color: "red"
        }
        edges.push(newEdge);
        initializeGraph();
        messageBox.html("<span class='text-success'>Great!! " + nameOfProcessType + " was added to graph :-)</span>");

        //Reset Prerequisite edges options
        if (nodes.length < 3)
            fromProcessType.append($("<option></option>")
                .attr("value", IdOfProcessType).text(nameOfProcessType));
        else {
            fromProcessType.append($("<option></option>")
                .attr("value", IdOfProcessType).text(updatedNameOfProcessTypeForEdgeOptions(nameOfProcessType)));
            toProcessType.append($("<option></option>")
                .attr("value", IdOfProcessType).text(updatedNameOfProcessTypeForEdgeOptions(nameOfProcessType)));
        }
        checkEvents();
    });

    $("#add-prerequisite").on("click", function () {

        let nameOfFrom = fromProcessType.find(":selected").text();
        let idOfFromProcessType = parseInt(fromProcessType.val()); //This table Id and not the node id

        let nameOfTo = toProcessType.find(":selected").text();
        let idOfToProcessType = parseInt(toProcessType.val()); //This is table Id and not the node id

        let id_of_FromNode = getNodeIDThroughIdOfProcessType(idOfFromProcessType);
        let id_of_ToNode = getNodeIDThroughIdOfProcessType(idOfToProcessType);

        let indexOfFromObject = getIndexOfNodeObject(id_of_FromNode);
        let indexOfToObject = getIndexOfNodeObject(id_of_ToNode);

        if (!prerequisiteActionIsValid(nameOfFrom, id_of_FromNode, nameOfTo, id_of_ToNode, 'add'))
            return;

        /*
        If there are three nodes sequentially e.g. a,b,c and there is going to be an edge between a and c
        then in that case lower down b. If there is another edge between b and d then c should be lowered but
        in this case, it should be checked whether the previous node (i.e. b) has lowered, if b has already been
        lowered then no need to lower c.
         */
        if (indexOfToObject - indexOfFromObject > 1) {
            //There is someone in between, loop on them and get them down

            for (let i = indexOfFromObject + 1; i < indexOfToObject; i++) {
                if (indexOfToObject - indexOfFromObject === 2) {
                    //If a, b, c, d are on same level then take b down and c (down+1).
                    if (nodes[i - 1].level === nodes[i].level) {
                        let referenceLevel = nodes[i - 1].level;
                        nodes[i].level = referenceLevel + 1;
                        nodes[i].x = nodes[i - 1].x + 1;
                    }
                } else {
                    if (nodes[i].level === nodes[i - 1].level || nodes[i].level === nodes[i + 1].level)
                        nodes[i].level++;
                }
            }
        }

        let newEdge = {
            from: id_of_FromNode, to: id_of_ToNode, arrows: "to", color: "blue"
        };
        edges.push(newEdge);
        initializeGraph();
    });

    $("#remove-prerequisite").on("click", function () {
        let nameOfFrom = fromProcessType.find(":selected").text();
        let idOfFromProcessType = parseInt(fromProcessType.val()); //This table Id and not the node id

        let nameOfTo = toProcessType.find(":selected").text();
        let idOfToProcessType = parseInt(toProcessType.val()); //This is table Id and not the node id

        let id_of_FromNode = getNodeIDThroughIdOfProcessType(idOfFromProcessType);
        let id_of_ToNode = getNodeIDThroughIdOfProcessType(idOfToProcessType);

        let indexOfFromObject = getIndexOfNodeObject(id_of_FromNode);
        let indexOfToObject = getIndexOfNodeObject(id_of_ToNode);

        if (!prerequisiteActionIsValid(nameOfFrom, id_of_FromNode, nameOfTo, id_of_ToNode, 'remove'))
            return;

        edges.forEach(function (item, index) {
            if (item.from === id_of_FromNode && item.to === id_of_ToNode)
                edges.splice(index, 1);
        });

        if (indexOfToObject - indexOfFromObject > 1) {
            //There is someone in between, loop on them and get them up

            for (let i = indexOfFromObject + 1; i < indexOfToObject; i++) {
                if (!nodeIsInBetweenAnEdge(nodes[i].id))
                    nodes[i].level--;
            }
        }
        initializeGraph();
        messageBox.html("<span class='text-success'> Edge from " + nameOfFrom + " to " + nameOfTo + " deleted from the graph :/</span>");
    });


    /*-------------------------Helper Functions----------------------*/

    function removeProcessType(nameOfProcessType) {

        let idOfProcessType = parseInt(processType.val());
        //let nameOfProcessType = processType.find(":selected").text();

        let nodeFoundAndRemoved = false;

        if (nodeIsPartOfAnEdge(getNodeIDThroughIdOfProcessType(idOfProcessType))) {
            messageBox.html("<span class='text-danger'>" + nameOfProcessType + " is part of a prerequisite edge. Delete the edge first to delete the node!</span>");
            return;
        }

        nodes.forEach(function (item, index) {
            if (item.tableId === idOfProcessType) {
                nodes.splice(index, 1);
                nodeFoundAndRemoved = true;
            }
        });

        if (nodeFoundAndRemoved) {
            edges.forEach(function (item, index) {
                if (item.to === getNodeIDThroughIdOfProcessType(idOfProcessType))
                    edges.splice(index, 1);
            });
            messageBox.html("<span class='text-success'>Okay!! " + nameOfProcessType + " was removed from the graph *_*</span>");
            initializeGraph();
        } else {
            messageBox.html("<span class='text-danger'>" + nameOfProcessType + " is not there in the graph :/</span>");
        }
    }

    function updatedNameOfProcessTypeForEdgeOptions(nameOfNode) {
        let labelIndex = 0;
        nodes.forEach(function (item, index) {

            if (item.label === "<<" + nameOfNode + ">>") {
                labelIndex++;
            }

        });
        if (labelIndex === 1)
            return nameOfNode;
        else
            return nameOfNode + "-" + labelIndex;
    }

    function nodeExistInGraph(id) {
        let existInGraph = false;
        nodes.forEach(function (item, index) {
            if (item.id === id)
                existInGraph = true;
        });
        return existInGraph;
    }

    //If an edge between two nodes already exist
    function edgeExistInGraph(idOfFrom, idOfTo) {
        let edgeExistInGraph = false;
        edges.forEach(function (item, index) {
            if (item.from === idOfFrom && item.to === idOfTo)
                edgeExistInGraph = true;
        });
        return edgeExistInGraph;
    }

    //If an edge from a node exists
    function edgeFromThisNodeExist(idOfNode) {
        let edgeFromNodeExist = false;
        edges.forEach(function (item, index) {
            if (item.from === idOfNode)
                edgeFromNodeExist = true;
        });
        return edgeFromNodeExist;
    }

    function getNodeIDThroughIdOfProcessType(idOfProcessType) {
        let nodeId = null;
        nodes.forEach(function (item, index) {
            if (item.tableId === idOfProcessType)
                nodeId = item.id;
        });
        return nodeId;
    }

    function getIndexOfNodeObject(nodeId) {
        let indexOfObject = null;
        nodes.forEach(function (item, index) {
            if (item.id === nodeId)
                indexOfObject = index;
        });
        return indexOfObject;
    }

    function nodeIsPartOfAnEdge(idOfNode) {
        let nodeHasEdge = false;
        edges.forEach(function (item, index) {
            if ((item.from !== 1 && item.to === idOfNode) || item.from === idOfNode)
                nodeHasEdge = true;
        });
        return nodeHasEdge;
    }

    function nodeIsInBetweenAnEdge(idOfNode) {
        let nodeIsBetweenAnEdge = false;
        edges.forEach(function (item, index) {
            if (item.arrows === "to" && item.from < idOfNode && item.to > idOfNode)
                nodeIsBetweenAnEdge = true;
        });
        return nodeIsBetweenAnEdge;
    }

    function getNodeObject(nodeId) {
        let node = null;
        nodes.forEach(function (item, index) {
            if (item.id === nodeId)
                node = item;
        });
        return node;
    }

    function getNameOfProcessTypeThroughNodID(nodeId) {
        let name = null;
        nodes.forEach(function (item, index) {
            if (item.id === nodeId) {
                name = item.label.replace("<<", "").replace(">>", "");
            }
        });
        return name;
    }

    function closeNodePopup() {
        nodePopup.css("display", "none");
        body.not(nodePopup).css({
            "pointer-events": "auto",
        });
        body.children().not(nodePopup).css("opacity", "1");
    }

    function prerequisiteActionIsValid(nameOfFrom, id_of_FromNode, nameOfTo, id_of_ToNode, actionType) {
        let indexOfFromObject = getIndexOfNodeObject(id_of_FromNode);
        let indexOfToObject = getIndexOfNodeObject(id_of_ToNode);
        let actionIsValid = true;

        if (id_of_FromNode === id_of_ToNode && id_of_FromNode !== null) {
            messageBox.html("<span class='text-danger'>From and To process types can not be the same!!</span>");
            actionIsValid = false;
        } else if (indexOfToObject === null) {
            messageBox.html("<span class='text-danger'>The 'To ProcessType' is empty!</span>");
            actionIsValid = false;
        } else if (!nodeExistInGraph(id_of_FromNode)) {
            messageBox.html("<span class='text-danger'>" + nameOfFrom + " does not exist in the graph!!</span>");
            actionIsValid = false;
        } else if (!nodeExistInGraph(id_of_ToNode)) {
            messageBox.html("<span class='text-danger'>" + nameOfTo + " does not exist in the graph!!</span>");
            actionIsValid = false;
        } else if (actionType === 'add') {
            if (edgeExistInGraph(id_of_FromNode, id_of_ToNode)) {
                messageBox.html("<span class='text-danger'>An edge from " + nameOfFrom + " to " + nameOfTo + " already exists!!</span>");
                actionIsValid = false;
            }
        } else if (actionType === 'remove') {
            if (!edgeExistInGraph(id_of_FromNode, id_of_ToNode)) {
                messageBox.html("<span class='text-danger'>An edge from " + nameOfFrom + " to " + nameOfTo + " does not exist!</span>");
                actionIsValid = false;
            }
        } else if (indexOfToObject < indexOfFromObject) {
            messageBox.html("<span class='text-danger'>You can not go back!!</span>");
            actionIsValid = false;
        }
        return actionIsValid;
    }

</script>
</body>
</html>